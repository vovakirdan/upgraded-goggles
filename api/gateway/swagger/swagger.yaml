openapi: 3.0.0
info:
  title: User-Post System API Gateway
  version: "1.0.0"
paths:
  /v1/users/register:
    post:
      summary: Register a new user
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: Successful registration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
  /v1/users/login:
    post:
      summary: User login
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
  /v1/users/{id}:
    get:
      summary: Get user information
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: User ID
      responses:
        '200':
          description: User data retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /v1/posts:
    post:
      summary: Create a new post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePostRequest'
      responses:
        '200':
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatePostResponse'
  /v1/posts/{id}:
    get:
      summary: Get a post
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Post ID
      responses:
        '200':
          description: Post data retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPostResponse'
    put:
      summary: Update a post
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Post ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePostRequest'
      responses:
        '200':
          description: Post updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdatePostResponse'
    delete:
      summary: Delete a post
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Post ID
      responses:
        '200':
          description: Post deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletePostResponse'
  /health:
    get:
      summary: Health Check
      security: []
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    RegisterRequest:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
      required:
        - username
        - email
        - password
    RegisterResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
    LoginRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password
    LoginResponse:
      type: object
      properties:
        token:
          type: string
        user:
          $ref: '#/components/schemas/User'
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string
        created_at:
          type: string
          format: date-time
    CreatePostRequest:
      type: object
      properties:
        user_id:
          type: integer
        title:
          type: string
        content:
          type: string
      required:
        - user_id
        - title
        - content
    CreatePostResponse:
      type: object
      properties:
        post:
          $ref: '#/components/schemas/Post'
    GetPostResponse:
      type: object
      properties:
        post:
          $ref: '#/components/schemas/Post'
    UpdatePostRequest:
      type: object
      properties:
        title:
          type: string
        content:
          type: string
      required:
        - title
        - content
    UpdatePostResponse:
      type: object
      properties:
        post:
          $ref: '#/components/schemas/Post'
    DeletePostResponse:
      type: object
      properties:
        message:
          type: string
    Post:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        title:
          type: string
        content:
          type: string
        created_at:
          type: string
          format: date-time
security:
  - BearerAuth: []
